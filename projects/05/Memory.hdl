// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // the address are as follows
    //  Bit possitions
    //  14 | 13  | address range in Chip
    // ---------------------------------
    //  0  | 0   | 16K RAM
    //  0  | 1   | 16K RAM
    //  1  | 0   |  8K Screen 
    //  1  | 1   |  1  Keyboard Register

    // based on MSB, break the streem between RAM and ScreenOrKeyboard
    DMux16 (in=in, sel=address[14], a=ramIn, b=screenOrKeyboardIn);
    DMux (in=load, sel=address[14], a=loadRam, b=loadScreenOrKeyboard);

    // between screen and keyboard
	DMux16 (in=in, sel=address[13], a=screenIn, b=keyboardIn);
    DMux (in=loadScreenOrKeyboard, sel=address[13], a=loadScreen, b=loadKeyboard);
    
    // R/W RAM
    RAM16K (in=ramIn, load=loadRam, address=address[0..13], out=ramOut);

    // R/W screen memory
  	Screen(in=screenIn, load=loadScreen, address=address[0..12], out=screenOut);

    // has to register only in case of 0x6000 only, any greater address must 
    // through error 
    // for any value >= 6000, using keyboard register only. // FIXME:
    Keyboard(out=keyboardOut);

    // choose between screen or keyboard
    Mux16 (a=screenOut, b=keyboardOut, sel=address[13], out=screenOrKeyboardOut);

    // choose between RAM or ScreenOrKeyboard
    Mux16 (a=ramOut, b=screenOrKeyboardOut, sel=address[14], out=out);
}